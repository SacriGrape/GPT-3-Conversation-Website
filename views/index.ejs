<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body onload="main()">
        <h1>Talk to GPT-3!</h1>
        <textarea id="user_info", cols="70" rows="1" disabled=true></textarea>
        <br>
        <% if (!isSignedIn) { %>
            <button onclick="redirect('/signup')" id="signupButton">Sign Up</button>
            <button onclick="redirect('/login')" id="loginButton">Login</button>
        <% } else { %>
            <button onclick="signout()" id="signoutButton">Sign Out</button>
        <% } %>
        <h2>Configuration</h2>
        <p><b>API Key</b> 
        <br>This is what is used to access GPT-3's servers, you can get your own from beta.openai.com</p>
        <textarea id="apiKey" cols="70" rows="1"></textarea>

        <p><b>Temperature (Default: 0.9)</b>
        <br>This is what controls the AI's confidence level. The higher the number the less confident it needs to be to accept an answer.
        <br>Leading to more realistic conversations (can also abandon character details at times though), a lower number requires it to be,
        <br>more confident but will often lead to repeats. 
        <br>You may want to change this depending on what you are wanting to get out of a conversation</p>
        <textarea id="temperature" cols="2" rows = "1">0.9</textarea>

        <p><b>Max Tokens (Default: 16)</b>
        <br>This effects the length a conversation can be, as well as the limit of the size that responses can be.
        <br>The higher the number, the less conversation you can have, but the longer a response can be
        <br>The lower the number, the longer a conversation you can have but the smaller a response can be.
        <br>If its too low, you might get respones that get cut off. If its too high, you will end up with very short conversations
        <br>16 is the default, however I would recommend raising and lowering this as your conversation goes on so that you can make sure 
        <br>you get the most detail</p>
        <textarea id="max_tokens" cols="2" rows="1">16</textarea>

        <p><b>Engine (default "text-davinci-001")</b></p>
        <textarea id="engine" cols="20" rows="1">text-davinci-001</textarea>
        <br>
        <h2>AI character details</h2>

        <p>AI's Character Name</p>
        <textarea id="ai_name" cols="70" rows = "1"></textarea>

        <p>AI's Character Description:</p>
        <textarea id="ai_charDesc" cols="70" rows="8"></textarea>

        <h2>Your character details (Leave these blank if you don't want to have details set for you)</h2>

        <p>Your character's name</p>
        <textarea id="pl_name" cols="70" rows = "1"></textarea>

        <p>Your Character's Description</p>
        <textarea id="pl_charDesc" cols="70" rows="8"></textarea>

        <p>What do you want to say?</p>
        <textarea id="question" cols="70" rows = "5"></textarea>
        <br>
        <button onclick="sendData()">Send</button>
        <br>
        <button onclick="getTokenUseCount()">Estimate Token count</button>
        <textarea id = "token_estimate" cols="30" rows = "1" disabled = true>? Tokens / 2048 Tokens</textarea>
        <p>Last response:</p>
        <textarea id="lastResponse" cols="70" rows = "7" disabled=true></textarea>
        <br>
        <p>Use this button to summarize the conversation. The AI will take the conversation and create as short summary of it. 
        <br>Some information will be lost, however it will allow you to keep conversations going for longer without having to
        <br>deal with the conversation going stale and repeating itself. The hire the token limit, the longer the summary can be</p>
        <button onclick="summarize()">Summarize</button>
        <p>Summary</p>
        <textarea id="summary_box" cols="70" rows="7" disabled></textarea>
        <br><br><br>
        <p>Chat Log</p>
        <textarea id="log" cols="70" rows = "8" disabled = true></textarea>
        <br><br><br>
        <p>Last Prompt:</p>
        <textarea id="lastPrompt" cols="70" rows = "8" disabled></textarea>
        <br><br><br>
        <h1>Edit responses</h1>
        <p><b>Enter Question ID (DEFAULT: 0)</b>
        <br>You can find this in the chat Log, question ID is ABOVE the question you wish to edit</p>
        <textarea id="edit_id" cols="5" rows="1">0</textarea>
        <br>
        <p>Will fill in the boxes with the questions information.</p>
        <button onclick="fillInEditBoxes()">Fill in boxes</button>
        <p>Applys changes to the given ID</p>
        <button onclick="editQuestion()">Apply Changes</button>
        <p>Deletes the question. This cannot be undone and there is no confirmation. Useful for deleting error messages if you have to</p>
        <button onclick="removeQuestion()">DELETE QUESTION</button>
        <p>Will insert a question at the given ID, increases the ID of the questions after by 1</p>
        <button onclick="insertQuestion()">INSERT QUESTION</button>
        <p><b>Question:</b></p>
        <textarea id="edit_question" cols="70" rows="5"></textarea>
        <p><b>Response:</b></p>
        <textarea id="edit_response" cols="70" rows="7"></textarea>
        <p><b>AI's Name</b>
        <br>(This is "Response" if you didn't put one in)</p>
        <textarea id="edit_ai_name" cols="70" rows="1"></textarea>
        <p><b>Your Name</b>
        <br>(This is "Question" if you didn't put one in)</p>
        <textarea id="edit_pl_name" cols="70" rows="1"></textarea>
        <script>
            var questions = []
            var summary = ""

            function main() {
                isSignedIn()
                loadElementsFromAccount()
            }

            function summarize() {
                var data = {
                    apiKey: apiKey.value,
                    questions: questions,
                    engine: engine.value,
                    temperature: parseFloat(temperature.value),
                    max_tokens: parseInt(max_tokens.value)
                }

                fetch('/api/generate_summary', {
                    method: "post",
                    headers: { "content-type": "application/json"},
                    body: JSON.stringify(data)
                }).then((value) => {
                    value.json().then((data) => {
                        lastPrompt.value = data.prompt
                        summary = data.response
                        summary_box.value = summary
                        clearChatLog()
                        updateChatLog()
                    })
                });
            }

            function redirect(location) {
                saveElementsToSession()
                window.location.href = window.location.origin + location
            }

            function loadElementsFromAccount() {
                fetch("/user/loadelementsfromaccount", {
                    method: "post",
                    headers: { "content-type": "application/json" }
                }).then((value) => {
                    value.json().then((data) => {
                        if (JSON.stringify(data) == "{}" || data == "{}") {
                            return
                        }
                        apiKey.value = data.apiKey
                        temperature.value = data.temperature
                        max_tokens.value = data.max_tokens
                        engine.value = data.engine
                        ai_name.value = data.ai_name
                        ai_charDesc.value = data.ai_charDesc
                        pl_name.value = data.pl_name
                        pl_charDesc.value = data.pl_charDesc
                        question.value = data.question
                        lastResponse.value = data.lastResponse
                        edit_id.value = data.edit_id
                        edit_question.value = data.edit_question
                        edit_response.value = data.edit_response
                        edit_ai_name.value = data.edit_ai_name
                        edit_pl_name.value = data.edit_pl_name
                        questions = data.questions
                        updateChatLog()
                    })
                })
            }

            function saveElementsToSession() {
                var data = {
                    apiKey: apiKey.value,
                    temperature: temperature.value,
                    max_tokens: max_tokens.value,
                    engine: engine.value,
                    ai_name: ai_name.value,
                    ai_charDesc: ai_charDesc.value,
                    pl_name: pl_name.value,
                    pl_charDesc: pl_charDesc.value,
                    question: question.value,
                    lastResponse: lastResponse.value,
                    questions: questions,
                    edit_id: edit_id.value,
                    edit_question: edit_question.value,
                    edit_response: edit_response.value,
                    edit_ai_name: edit_ai_name.value,
                    edit_pl_name: edit_pl_name.value
                }

                fetch("/user/saveelementstosession", {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify(data)
                })
            }

            function signout() {
                fetch('/user/signout', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json'},
                    body: "{}"
                }).then(() => {
                    redirect("/")
                })
            }

            function isSignedIn() {
                fetch("/user/signedin", {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json'},
                    body: "{}"
                }).then((value) => {
                    value.json().then((response) => {
                        var username = "Not Signed In!"
                        if (response.isSignedIn) {
                            username = response.username
                        }
                        user_info.value = `Signed in as: ${username}`
                    })
                })
            }

            function fixQuestionIds() {
                for (var question of questions) {
                    question.id = questions.indexOf(question)
                }
            }

            function removeQuestion() {
                var id = parseInt(edit_id.value)
                console.log(id)

                if (id == null) {
                    id = 0
                }

                var index = questions[id]

                questions.splice(id, 1)
                fixQuestionIds()
                updateChatLog()
            }

            function insertQuestion() {
                var id = parseInt(edit_id.value)

                if (id == null) {
                    id = 0
                }

                var question = {
                    question: edit_question.value,
                    response: edit_response.value,
                    ai_name: edit_ai_name.value,
                    pl_name: edit_pl_name.value
                }

                questions.splice(id, 0, question)
                fixQuestionIds()
                updateChatLog()
            }

            function editQuestion() {
                // Grabbing element values
                var question = edit_question.value
                var response = edit_response.value
                var ai_name = edit_ai_name.value
                var pl_name = edit_pl_name.value
                var id = parseInt(edit_id.value)

                // Verify the value to avoid a crash
                if (id == null) {
                    id = 0
                }

                // Checking to make sure that the ID is a valid one
                if ((questions.length - 1) < id) {
                    console.log("ID Too Big")
                    return;
                }

                // Grabbing the question
                var storedQuestion = questions[id]

                // Updating the stored values
                storedQuestion.question = question
                storedQuestion.response = response
                storedQuestion.ai_name = ai_name
                storedQuestion.pl_name = pl_name

                // Replacing the values in the array with updated info
                questions[id] = storedQuestion

                // Update the chat log with changes
                updateChatLog()
            }

            function fillInEditBoxes() {
                // Grabing elements and element values
                var question = edit_question.value 
                var response = edit_response.value
                var ai_name = edit_ai_name.value
                var pl_name = edit_pl_name.value
                var id = parseInt(edit_id.value)
                
                // Verifying value validity to avoid crashes
                if (id == null) {
                    id = 0
                }

                // Checking to make sure that the ID is a valid one
                if ((questions.length - 1) < id) {
                    console.log("ID Too Big")
                    return;
                }

                // Grabbing the question
                var storedQuestion = questions[id]

                // Setting value to boxes
                edit_question.value = storedQuestion.question
                edit_response.value = storedQuestion.response
                edit_ai_name.value = storedQuestion.ai_name
                edit_pl_name.value = storedQuestion.pl_name
            }

            function getTokenUseCount() {
                var ai_charDesc_elem = ai_charDesc.value
                var pl_charDesc_elem = pl_charDesc.value
                var question_elem = question.value
                var ai_name_elem = ai_name.value
                var pl_name_elem = pl_name.value

                var nextQuestion = {"question": question_elem, "ai_name": ai_name_elem, "pl_name": pl_name_elem}

                var data = {
                    "ai_charDesc": ai_charDesc_elem,
                    "pl_charDesc": pl_charDesc_elem,
                    "questions": questions,
                    "nextQuestion": nextQuestion,
                    "max_tokens": max_tokens.value,
                }

                fetch('api/token_estimate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json'},
                    body: JSON.stringify(data)
                }).then(res => {
                    res.text().then(text => {
                        var max_tokens_elem = parseInt(max_tokens.value)
                        var token_estimate_elem = token_estimate
                        token_estimate_elem.value = `${text} Tokens / 2048 Tokens`
                    })
                })
            }

            function clearChatLog() {
                questions = []
                var chatLog = log
                chatLog.value = ""
            }

            function sendData() {
                saveElementsToSession()

                var ai_charDesc_elem = ai_charDesc.value
                var pl_charDesc_elem = pl_charDesc.value
                var question_elem = question.value
                var apiKey_elem = apiKey.value
                var temperature_elem = parseFloat(temperature.value)
                var ai_name_elem = ai_name.value
                var pl_name_elem = pl_name.value
                var max_tokens_elem = parseInt(max_tokens.value)
                var engine_elem = engine.value

                if (ai_name_elem == "") {
                    ai_name_elem = "Response"
                }

                if (pl_name_elem == "") {
                    pl_name_elem = "Question"
                }


                if (temperature_elem == null) {
                    temperature_elem = 0.9
                }

                if (max_tokens_elem == null) {
                    max_tokens_elem = 16
                }

                if (engine_elem == (null || "")) {
                    engine_elem = "text-davinci-001"
                }

                var nextQuestion = {"question": question_elem, "ai_name": ai_name_elem, "pl_name": pl_name_elem, "response": "", "id": questions.length}

                var data = {
                    "ai_charDesc": ai_charDesc_elem,
                    "pl_charDesc": pl_charDesc_elem,
                    "questions": questions,
                    "apiKey": apiKey_elem,
                    "temperature": temperature_elem,
                    "ai_name": ai_name_elem,
                    "pl_name": pl_name_elem,
                    "max_tokens": max_tokens_elem,
                    "nextQuestion": nextQuestion,
                    "engine": engine_elem,
                    "summary": summary
                }

                fetch('api/generate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json'},
                    body: JSON.stringify(data)
                }).then(res => {
                    res.json().then(data => {
                        var response = data.response.trim()

                        lastPrompt.value = data.prompt

                        lastResponse.value = response
                        nextQuestion.response = response

                        questions.push(nextQuestion)

                        updateChatLog()
                    });
                })
            }

            function updateChatLog() {
                var chatLog = log

                var logValue = ""
                for (var question of questions) {
                    logValue += `ID: ${question.id}\n${question.pl_name}: ${question.question}\n${question.ai_name}: ${question.response}\n\n`
                }

                chatLog.value = logValue
            }
        </script>
    </body>
</html>